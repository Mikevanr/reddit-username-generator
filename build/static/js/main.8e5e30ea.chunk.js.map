{"version":3,"sources":["App.tsx","index.js"],"names":["App","props","numUsernamesChanged","e","value","setState","numUsernames","temperatureChanged","temperature","startStringChanged","startString","loadModel","a","fetch","then","res","json","data","loadingModel","generateUsernames","generatingText","numGenerated","state","headers","method","body","JSON","stringify","usernames","delay","Promise","setTimeout","this","Container","Header","size","style","paddingTop","display","padding","href","Divider","Segment","Form","Group","widths","Popup","content","trigger","Field","control","Input","label","placeholder","onChange","on","Loader","active","Button","color","onClick","length","List","map","username","index","Item","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e5e30ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Container, Divider, Form, Header, Input, List, Loader, Popup, Segment } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\ntype Props = {};\n\ntype State = {\n  loadingModel: boolean,\n  generatingText: boolean,\n  numUsernames: number,\n  temperature: number,\n  startString: string,\n  numGenerated: number,\n  usernames: Array<string>,\n};\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loadingModel: true,\n      generatingText: false,\n      numUsernames: 5,\n      temperature: 0.5,\n      startString: '\\n',\n      numGenerated: 0,\n      usernames: [],\n    };\n  }\n\n  timeout(delay: number) {\n    return new Promise(res => setTimeout(res, delay));\n  }\n\n  numUsernamesChanged = (e, { value }) => {\n    this.setState({ numUsernames: value });\n  }\n\n  temperatureChanged = (e, { value }) => {\n    this.setState({ temperature: value });\n  }\n\n  startStringChanged = (e, { value }) => {\n    if (value === '') {\n      this.setState({ startString: '\\n' });\n    }\n    else {\n      this.setState({ startString: value });\n    }\n  }\n\n  componentDidMount() {\n    this.loadModel();\n  }\n\n  loadModel = async () => {\n    fetch('/api/load').then(res => res.json()).then(data => {\n      this.setState({ loadingModel: false });\n    })\n  }\n\n\n\n  generateUsernames = async () => {\n    this.setState({ generatingText: true, numGenerated: 0 }, async () => {\n      const { numUsernames, temperature, startString } = this.state;\n      fetch('/api/generate', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          'numUsernames': numUsernames,\n          'temperature': temperature,\n          'startString': startString,\n        })\n      })\n        .then(res => res.json()).then(data => {\n          this.setState({ generatingText: false, usernames: data });\n        })\n    });\n  }\n\n  render() {\n    const { loadingModel, generatingText, usernames } = this.state;\n    return (\n      <Container>\n        <Header size='huge' style={{ paddingTop: '30px', display: 'inline-block' }}>Reddit Username Generator</Header>\n        <a style={{ padding: '20px' }} href='https://github.com/dchen327/reddit-username-generator'>(GitHub)</a>\n        <Divider />\n        <Segment size='large'>\n          <p>Trained on 400,000 Reddit usernames, this LSTM-based text generator can produce novel usernames very similar to other Redditors.</p>\n          <p>Since the text generation is done in browser through TensorFlow.js, it can take up to around 1 second per username.</p>\n          <p>Toggle the temperature to vary the degree of \"sameness\" in the generated usernames. Lower temperatures are more predictable.</p>\n          <p>I apologize if there's any profanity in the generated usernames since I haven't added any filtering.</p>\n          <p>TODOS: form input error handling, show progress while loading, actually check if username is taken, speed ups</p>\n        </Segment>\n        <Form size='big'>\n          <Form.Group widths='equal'>\n            <Popup\n              content='Generate this many usernames.'\n              trigger={\n                <Form.Field control={Input} label='Number of usernames:' placeholder='5'\n                  onChange={this.numUsernamesChanged} />\n              }\n              on='focus'\n            />\n            <Popup\n              content='Temperatures are between 0 and 1, with lower temperatures producing more predictable text and higher temperatures resulting in more surprising text.'\n              trigger={\n                <Form.Field control={Input} label='Temperature:' placeholder='0.5'\n                  onChange={this.temperatureChanged} />\n              }\n              on='focus'\n            />\n            <Popup\n              content='Start string (ex: PM_ME). This will be used as the prefix for the first username generated. If left blank, the first username will start with a random character.'\n              trigger={\n                <Form.Field control={Input} label='Start string:'\n                  onChange={this.startStringChanged} />\n              }\n              on='focus'\n            />\n          </Form.Group>\n        </Form>\n        <Divider />\n        {loadingModel ? // show loading indicator when loading model\n          <Loader size='huge' active>Loading Model</Loader> :\n          <Button color='teal' size='big' onClick={this.generateUsernames}>Create Usernames</Button>}\n\n        {generatingText && // when generating text\n          // <Loader active>Generating usernames... {numGenerated}/{numUsernames}</Loader>}\n          <Loader size='huge' active>Generating usernames... (~1s per username)</Loader>}\n\n        {usernames.length > 0 && // usernames are generated\n          <Segment>\n            <List size='huge'>\n              {usernames.map((username, index) =>\n                <List.Item key={index}>{username}</List.Item>\n              )}\n            </List>\n          </Segment>\n        }\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.tsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}